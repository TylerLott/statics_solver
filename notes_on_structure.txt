Force(direction(degrees from horizontal)=90, magnitude, x_position, y_position) or (x_component, y_component, x_position, y_position):

	self.direction = direction

	self.magnitude = magnitude
		if magnitude = 'find'
			magnitude in our equation = 1
	self.x_comp = x_comp
		x_comp = cos(self.direction)
	self.y_comp = y_comp
		y_comp = sin(self.direction)

Force_Area(direction(degrees from horizontal), magnitude, x_position, y_position, x_position_end, y_position_end) or (x_component, y_component, x_position_start, y_position_start, x_position_end, y_position_end)

Moment(x_position, y_position, magnitude, direction(clockwise or counter-clockwise))

Member(length, weight per unit length, weight, x_position_begin, y_position_begin, x_position_end, y_position_end):


Pin_connection(x_position, y_position):
	gives x_reaction(Force)
	gives y_reaction(Force)

Roller_connection(x_position, y_position):
	gives y_reaction(Force)

Fixed_connection(x_position, y_position):
	gives x_reaction(Force)
	gives y_reaction(Force)
	gives moment_reaction(moment)


sum of known forces x
	sum_x = (Force1(x_comp) + Forcen(x_comp)...)
		if the Force(magnitude) is a 'find' ommit
sum of known forces y
	sum_y = (Force1(y_comp) + Forcen(y_comp)...)
		if the Force(magnitude) is a 'find' ommit
sum of known moments about Point
	if Force1(x_comp) !=0 and Force1(y_comp) != 0:
		use Force1(x_comp) * (Force1(x_pos) - Point(x_pos))
		set Force1(y_comp) = 0
	if Moment(x_pos, y_pos) == Point(x_pos, y_pos)
		moment = 0

	sum_m = Force1(x_comp) * (Force1(x_pos) - Point(x_pos)) + Forcen(x_comp) * (Forcen(x_pos) - Point(x_pos)) + moment1 + momentn
		if the moment(magnitude) is a 'find' ommit

list of Forces

	forces_x = [
		    if Force1(magnitude) != 'find' 
			that value in list = 0
		    else if Force1(magnitude) == 'find':
			value = 1 * Force(x_comp),
		    Force1(magnitude) * 0,
		    if Forcen(magnitude) != 'find' 
			that value in list = 0
		    else if Forcen(magnitude) == 'find':
			value = 1 * Force(x_comp),
		    Forcen(magnitude) * 0,
		    ...]

	forces_y = [
		    Force1(magnitude) * 0,
		    if Force1(magnitude) != 'find' 
			that value in list = 0
		    else if Force1(magnitude) == 'find':
			value = 1 * Force(y_comp),
		    Forcen(magnitude) * 0,
		    if Forcen(magnitude) != 'find' 
			that value in list = 0
		    else if Forcen(magnitude) == 'find':
			value = 1 * Force(y_comp),
		    ...]

   moment_total_points_all = []
   for i in points
	moments_from_x_forces_for_Point[i] = [
				 if Force1(magnitude) != 'find' 
					that value in list = 0
		    		 else if Force1(magnitude) == 'find':
					value = (1 * Force1(x_comp)) * (Force1(x_pos) - Point[i](x_pos)),
		    		 Force1(magnitude) * 0,
		    		 if Forcen(magnitude) != 'find' 
					that value in list = 0
		   		 else if Forcen(magnitude) == 'find':
					value = (1 * Forcen(x_comp)) * (Force1(x_pos) - Point[i](x_pos)),
		   		 Forcen(magnitude) * 0,
				 
				 if Moment1(x_pos, y_pos) == Point[i](x_pos, y_pos):
					value = 0
				 else: 
					value = Momentn(magnitude),
				 if Momentn(x_pos, y_pos) == Point[i](x_pos, y_pos):
					value = 0
				 else: 
					value = Momentn(magnitude),

				 ...]

	moments_from_y_forces_for_Point[i] = [
				 if Force1(magnitude) != 'find' 
					that value in list = 0
		    		 else if Force1(magnitude) == 'find':
					value = (1 * Force1(y_comp)) * (Force1(y_pos) - Point[i](y_pos)),
		    		 Force1(magnitude) * 0,
		    		 if Forcen(magnitude) != 'find' 
					that value in list = 0
		   		 else if Forcen(magnitude) == 'find':
					value = (1 * Forcen(y_comp)) * (Force1(y_pos) - Point[i](y_pos)),
		   		 Forcen(magnitude) * 0,

				 if Moment1(x_pos, y_pos) == Point[i](x_pos, y_pos):
					value = 0
				 else: 
					value = 0,
				 if Momentn(x_pos, y_pos) == Point[i](x_pos, y_pos):
					value = 0
				 else: 
					value = 0,
				 ...]

	# add the moments from y and x 
	moment_total_point[i] = []
	for pos in range(len(moments_from_x_forces_for_Point[i])):
		moment_total_point1.append(moments_from_x_forces_for_Point1[i] + 				    					   moments_from_x_forces_for_Point1[i])
	moment_total_point_all.append([moment_total_point[i]])


A = np.array([[forces_x], [forces_y]])
for i in (moment_total_point_all)):
	A.np.append([moment_total_point_all[i]]

B = np.array([sum_x, sum_y, sum_m, sum_m1, sum_mn])


#from numpy.linalg import inv
A_inv = inv(A)
	
answer = np.matmul(A_inv, B)
















